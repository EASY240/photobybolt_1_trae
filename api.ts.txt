// api.ts
export async function processImage(toolApiEndpoint: string, imageFile: File): Promise<string> {
  try {
    // Use your proxy server URLs
    const PROXY_BASE_URL = 'http://localhost:3001';
    
    console.log('Starting image processing...');

    // Step 1: Get upload URL from LightXEditor via proxy
    const uploadUrlResponse = await fetch(`${PROXY_BASE_URL}/api/lightx/v2/uploadImageUrl`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        uploadType: 'imageUrl',
        size: imageFile.size,
        contentType: imageFile.type,
      }),
    });

    if (!uploadUrlResponse.ok) {
      const errorData = await uploadUrlResponse.json();
      throw new Error(`Failed to get upload URL: ${uploadUrlResponse.status} - ${JSON.stringify(errorData)}`);
    }

    const uploadData = await uploadUrlResponse.json();
    console.log('Upload URL received:', uploadData);
    
    if (!uploadData.body || !uploadData.body.uploadImage || !uploadData.body.imageUrl) {
      throw new Error(`Invalid upload URL response: ${JSON.stringify(uploadData)}`);
    }

    const { uploadImage, imageUrl } = uploadData.body;

    // Step 2: Upload image to S3 via proxy
    const uploadImageResponse = await fetch(`${PROXY_BASE_URL}/api/upload-proxy?uploadUrl=${encodeURIComponent(uploadImage)}`, {
      method: 'PUT',
      headers: {
        'Content-Type': imageFile.type,
        'Content-Length': imageFile.size.toString(),
      },
      body: imageFile,
    });

    if (!uploadImageResponse.ok) {
      const errorData = await uploadImageResponse.json();
      throw new Error(`Failed to upload image: ${uploadImageResponse.status} - ${JSON.stringify(errorData)}`);
    }

    console.log('Image uploaded successfully');

    // Step 3: Call remove-background API via proxy
    const removeBackgroundResponse = await fetch(`${PROXY_BASE_URL}/api/lightx/v1/remove-background`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        imageUrl: imageUrl,
      }),
    });

    if (!removeBackgroundResponse.ok) {
      const errorData = await removeBackgroundResponse.json();
      throw new Error(`Failed to remove background: ${removeBackgroundResponse.status} - ${JSON.stringify(errorData)}`);
    }

    const backgroundRemovalData = await removeBackgroundResponse.json();
    console.log('Background removal initiated:', backgroundRemovalData);
    
    if (!backgroundRemovalData.body || !backgroundRemovalData.body.orderId) {
      throw new Error(`Invalid remove background response: ${JSON.stringify(backgroundRemovalData)}`);
    }

    const { orderId } = backgroundRemovalData.body;

    // Step 4: Poll for order status
    let resultUrl = '';
    let retries = 0;
    const maxRetries = 5;
    const pollInterval = 3000;

    while (!resultUrl && retries < maxRetries) {
      if (retries > 0) {
        console.log(`Polling attempt ${retries + 1}/${maxRetries}...`);
        await new Promise((resolve) => setTimeout(resolve, pollInterval));
      }

      const orderStatusResponse = await fetch(`${PROXY_BASE_URL}/api/lightx/v1/order-status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderId: orderId,
        }),
      });

      if (!orderStatusResponse.ok) {
        const errorData = await orderStatusResponse.json();
        throw new Error(`Failed to get order status: ${orderStatusResponse.status} - ${JSON.stringify(errorData)}`);
      }

      const orderStatus = await orderStatusResponse.json();
      console.log('Order status:', orderStatus);
      
      if (!orderStatus.body) {
        throw new Error(`Invalid order status response: ${JSON.stringify(orderStatus)}`);
      }

      if (orderStatus.body.status === 'active' && orderStatus.body.output) {
        resultUrl = orderStatus.body.output;
        console.log('Processing completed! Result URL:', resultUrl);
        break;
      } else if (orderStatus.body.status === 'failed') {
        throw new Error(`Image processing failed: ${orderStatus.body.message || 'Unknown error'}`);
      }
      
      retries++;
    }

    if (!resultUrl) {
      throw new Error('Processing timeout: No result URL found after maximum retries.');
    }

    return resultUrl;
  } catch (error) {
    console.error('Error processing image:', error);
    throw error;
  }
}
