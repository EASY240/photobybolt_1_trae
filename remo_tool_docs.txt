Remove background in Seconds
Overview
Welcome to the LightX Remove Background API V2 Documentation. Our AI Remove Background API offers sophisticated capabilities for precise image background removal. Advanced segmentation techniques effectively isolate the subject, delivering a clean and professional result across diverse applications, including e-commerce product imagery, creative visual projects, and more. The API ensures image background removal with high accuracy and operational efficiency, thereby optimising workflows. Discover the Full Guide to Begin!

Remove BG API Rollout
To access your removed background API, you need to generate an API key. Visit the LightX API to retrieve your key. Remove or add a color code or background to your image in no time. Each generation will cost you 0.5 credit.

note
To ensure seamless processing, it is mandatory to use ImageUpload API for uploading images. External image URLs are not supported and will result in an error.

Image Upload V2
API v2 Image Upload delivers secure, high-performance image hosting, enabling users to effortlessly generate and manage image URLs. With advanced security measures, optimized processing speed, and seamless integration, it ensures faster, more reliable uploads. Designed for scalability and ease of use, it simplifies image management for developers, e-commerce platforms, and creative applications.

Here are the steps

Insert the size of the image for which you want to generate a URL. Ensure the image size does not exceed 5 MB or 5,242,880 bytes. 


JavaScript


const url = 'https://api.lightxeditor.com/external/api/v2/uploadImageUrl';

const headers = {
'Content-Type': 'application/json',
'x-api-key': '<enter x-api-key>'
};

const body = {
"uploadType": "imageUrl",
"size": 791436,   // Image Size in Bytes
"contentType": "image/jpeg"   // Image File Format
};

fetch(url, {
method: 'POST',
headers: headers,
body: JSON.stringify(body)
})
.then(response => {
if (!response.ok) {
  throw new Error(`HTTP error! Status: ${response.status}`);
}
return response.json();
})
.then(data => console.log('Response:', data))
.catch(error => console.error('Error:', error));


Response
{
   "statusCode": 2000,
   "message": "SUCCESS",
   "body": {
       "uploadImage": "https://lightx-ai-version-2.s3-accelerate.amazonaws.com/apikey/35b4895058344d109ea8ad059be61d2d.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20250127T044301Z&X-Amz-SignedHeaders=content-length%3Bcontent-type%3Bhost&X-Amz-Expires=3599&X-Amz-Credential=AKIA2Y6AHIB47OUAEN64%2F20250127%2Fap-south-1%2Fs3%2Faws4_request&X-Amz-Signature=fce9526cb5c8ff129d7e47a21f26955dd3215b0d42e58ce52626f4e66b694384",
       "imageUrl": "https://d3aa3s3yhl0emm.cloudfront.net/apikey/35b4895058344d109ea8ad059be61d2d.jpeg",
       "size": 791436
   }
}


As you can see above, in the response you have uploadImage and ImageURL. uploadImage url will be used to make a Put request, whereas the imageUrl is the final image url which don't have image uploaded rightnow. To upload a image follow the next process.

Next, use the uploadImage URL obtained from the https://api.lightxeditor.com/external/api/v2/uploadImageUrl API to upload your image. To make your imageUrl valid, perform a PUT request to the uploadImage URL. Ensure that the request includes the image file in the correct format while maintaining the required image size. The image should be the same as the one used for uploading image size.

Here is an example of how to make a PUT request using the uploadImage URL along with the image.


JavaScript


const url = 'https://lightx-ai-version-2.s3-accelerate.amazonaws.com/apikey/36f83a00fcd74180acfda42293455843.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20250127T050022Z&X-Amz-SignedHeaders=content-length%3Bcontent-type%3Bhost&X-Amz-Expires=3599&X-Amz-Credential=AKIA2Y6AHIB47OUAEN64%2F20250127%2Fap-south-1%2Fs3%2Faws4_request&X-Amz-Signature=093760f15d8302c424823ad671a973ce984cc7ab2f71265ae767afcdf99ef08f';

// Path to your image file
const fileInput = document.createElement('input');
fileInput.type = 'file';
fileInput.accept = 'image/*';

fileInput.addEventListener('change', async () => {
const file = fileInput.files[0];
if (!file) {
console.error('No file selected');
return;
}

try {
const response = await fetch(url, {
  method: 'PUT',
  headers: {
    'Content-Type': 'image/jpeg',
  },
  body: file, // Use the selected file as the body
});

if (!response.ok) {
  throw new Error(`HTTP error! Status: ${response.status}`);
}

console.log('Upload successful:', response.status);
} catch (error) {
console.error('Error:', error);
}
});

// Trigger the file input for the user to select an image
fileInput.click();


Once the image is uploaded, you will receive an HTTP 200 OK status, indicating that the upload was successful. You can now access the imageUrl obtained from the https://api.lightxeditor.com/external/api/v2/uploadImageUrl API.

note
This API generates image URLs that remain valid for 24 hours without consuming any credits or incurring API usage charges, after which the URLs expire.

Quick Steps to Generate with Your API
Going Forward, use cURL along with x-api-key and your API key (as given below) to remove background with AI. Next, proceed to the "Body" tab to configure the request payload according to the required format and input data as required. Finally, click "Send" to submit the request.


JavaScript

const fetch = require('node-fetch');  // Only needed if you are using Node.js

const url = 'https://api.lightxeditor.com/external/api/v1/remove-background';
const apiKey = '<Insert your API Key>';  // Replace with your actual API key

const data = {
"imageUrl": "https://example.com/your-image.jpg",  // Replace with the URL of your input image
"background": "color name, color code or background image URL"  // Replace with the desired background color name, color code or background URL
};

const options = {
method: 'POST',
headers: {
    'Content-Type': 'application/json',
    'x-api-key': apiKey
},
body: JSON.stringify(data)
};

fetch(url, options)
.then(response => {
    if (!response.ok) {
        throw new Error(`Request failed with status code ${response.status}`);
    }
    return response.json();
})
.then(data => {
    console.log('Request was successful!');
    console.log(data);
})
.catch(error => {
    console.error('Error:', error);
});
}


Once your request is completed, visualize the "Response" to verify that the API call is executed successfully (as given below).

Response
{
   "statusCode": 2000,
   "message": "SUCCESS",
   "body": {
       "orderId": "7906da5353b504162db5199d6",
       "maxRetriesAllowed": 5,
       "avgResponseTimeInSec": 15,
       "status": "init"
   }
}

orderId: This key is the unique identifier for the order.
maxRetriesAllowed: The number of retries a user can attempt when the status is "init".
avgResponseTimeInSec: This is the average time the machine can take to generate the output.
Status: There are three scenarios: "init" = proccessing, "active" = generated, "failed" = error.

Once your order Id is generated, input it into the status check system to retrieve and review the results of your API Tool (mentioned below).

Check Status

JavaScript

const fetch = require('node-fetch'); // If using Node.js, install node-fetch using npm install node-fetch

// Define the URL and API key
const url = 'https://api.lightxeditor.com/external/api/v1/order-status';
const apiKey = '<Insert your API Key>';  // Replace with your actual API key

// Define the request body
const payload = {
"orderId": "insert your Order ID"  // Replace with your actual Order ID
};

// Set headers
const headers = {
'Content-Type': 'application/json',
'x-api-key': apiKey
};

// Make the POST request
fetch(url, {
method: 'POST',
headers: headers,
body: JSON.stringify(payload)
})
.then(response => {
if (!response.ok) {
    throw new Error(Failed to retrieve order status. Status code: ${response.status}, Response: ${response.statusText});
}
return response.json();
})
.then(data => {
console.log("Response:", data);
})
.catch(error => {
console.error("Error:", error.message);
});


After hitting orderId as request payload in your check status make sure you make a subsequent API call which means, in every 3 seconds you can hit until you get "status": "active"

note
The maximum time for receiving output is 15 seconds. You are allowed up to 5 retries for checking the status, with each API call being made every 3 seconds. You need to repeatedly call this API up to 5 times until you receive a status of as active/failed. In case of failed status, no credit will be deducted. When the status is "active," the relevant output will be included in the output attribute of the response.

Output
{
   "statusCode": 2000,
   "message": "SUCCESS",
   "body": {
       "orderId": "7906da5353b504162db5199d6",
       "status": "active",
       "output": "https://example.com/your-outputimage.png",
       "mask": "https://example.com/your-maskimage.png"
   }
}